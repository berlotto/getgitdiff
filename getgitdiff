#!/usr/bin/env python
# -*- encoding: utf-8 -*-

from git import *
import sys
import os
import shutil
import argparse
from datetime import datetime

def_dir = "/tmp/<random_dir>/"

parser = argparse.ArgumentParser()
parser.add_argument('-n', '--number', dest='number',
        help="How many changes will be treated", default=1)
parser.add_argument('-d', '--directory', dest='work_dir',
        help="Where is the git repository", default='.')
parser.add_argument('-t', '--todir', dest="todir",
        help="Directory to copy the files", default=def_dir)
parser.add_argument('-s', '--onlyshow', dest="docopy", action="store_false", 
        default=True, help="Only show the diff files, and no copy")

options = parser.parse_args()

print "Retriving %s commits change on: %s" % (options.number,
        options.work_dir)

ignore_files = ['.gitignore']

repo = Repo(options.work_dir)

commits_list = list(repo.iter_commits())

changed_files = []
commits = list(enumerate(commits_list))
for i,c in commits:
    if int(i) < int(options.number):
        for d in c.diff(commits_list[i+1]):
            if d.a_blob and d.a_blob.path not in changed_files:
                changed_files.append(d.a_blob.path)
            if d.b_blob and d.b_blob is not None and d.b_blob.path not in  changed_files:
                changed_files.append(d.b_blob.path)

# print '-'*30
# print '\n'.join(changed_files)

if options.todir == def_dir and options.docopy:
    def_name = datetime.now().strftime('%Y%m%d%H%M%S')
    options.todir = '/tmp/%s' % def_name
    try:
        os.makedirs(options.todir)
        print "Created default directory %s" % options.todir
    except:
        print "Error trying to create default directory, set -t option."
        exit(-1)

if not os.path.isdir(options.todir) and options.docopy:
    print "ERROR: %s ir not a directory!" % options.todir
    exit(-2)


print "-"*30
if options.docopy:
    print 'Copying files above...'
else:
    print "Showing files..."

# import pdb
# pdb.set_trace()

for strfile in changed_files:
    if not strfile in ignore_files:
        original = os.path.join(options.work_dir, strfile)
        if options.docopy:
            dstdir =  os.path.join(options.todir, os.path.dirname(strfile))
            try:
                os.makedirs(dstdir)
            except OSError, e:
                pass
            print ":", original
            shutil.copy(original, dstdir)
        else:
            print ":", original


if options.docopy:
    print "%(qtd)s files copied to %(todir)s." % {
        'qtd': str(len(changed_files)),
        'todir' : options.todir
    }

